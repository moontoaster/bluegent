
# This file was @generated by crate2nix 0.14.1 with the command:
#   "generate" "-o" "nix/Crate.nix"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrateForPkgs ? pkgs: pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Elements to add to the `-C target-feature=` argument passed to `rustc`
  # (separated by `,`, prefixed with `+`).
  # Used for conditional compilation based on CPU feature detection.
, targetFeatures ? []
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = rec {
    packageId = "bluegent";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = internal.buildRustCrateWithFeatures {
      inherit packageId;
    };

    # Debug support which might change between releases.
    # File a bug if you depend on any for non-debug work!
    debug = internal.debugCrate { inherit packageId; };
  };
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "bluegent" = rec {
      packageId = "bluegent";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bluegent";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
      name = "all-workspace-members";
      paths =
        let members = builtins.attrValues workspaceMembers;
        in builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "anstream" = rec {
        crateName = "anstream";
        version = "0.6.20";
        edition = "2021";
        sha256 = "14k1iqdf3dx7hdjllmql0j9sjxkwr1lfdddi3adzff0r7mjn7r9s";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "anstyle-parse";
            packageId = "anstyle-parse";
          }
          {
            name = "anstyle-query";
            packageId = "anstyle-query";
            optional = true;
          }
          {
            name = "anstyle-wincon";
            packageId = "anstyle-wincon";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "colorchoice";
            packageId = "colorchoice";
          }
          {
            name = "is_terminal_polyfill";
            packageId = "is_terminal_polyfill";
          }
          {
            name = "utf8parse";
            packageId = "utf8parse";
          }
        ];
        features = {
          "auto" = [ "dep:anstyle-query" ];
          "default" = [ "auto" "wincon" ];
          "wincon" = [ "dep:anstyle-wincon" ];
        };
        resolvedDefaultFeatures = [ "auto" "wincon" ];
      };
      "anstyle" = rec {
        crateName = "anstyle";
        version = "1.0.11";
        edition = "2021";
        sha256 = "1gbbzi0zbgff405q14v8hhpi1kz2drzl9a75r3qhks47lindjbl6";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "anstyle-parse" = rec {
        crateName = "anstyle-parse";
        version = "0.2.7";
        edition = "2021";
        sha256 = "1hhmkkfr95d462b3zf6yl2vfzdqfy5726ya572wwg8ha9y148xjf";
        libName = "anstyle_parse";
        dependencies = [
          {
            name = "utf8parse";
            packageId = "utf8parse";
            optional = true;
          }
        ];
        features = {
          "core" = [ "dep:arrayvec" ];
          "default" = [ "utf8" ];
          "utf8" = [ "dep:utf8parse" ];
        };
        resolvedDefaultFeatures = [ "default" "utf8" ];
      };
      "anstyle-query" = rec {
        crateName = "anstyle-query";
        version = "1.1.4";
        edition = "2021";
        sha256 = "1qir6d6fl5a4y2gmmw9a5w93ckwx6xn51aryd83p26zn6ihiy8wy";
        libName = "anstyle_query";
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.60.2";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Console" "Win32_Foundation" ];
          }
        ];

      };
      "anstyle-wincon" = rec {
        crateName = "anstyle-wincon";
        version = "3.0.10";
        edition = "2021";
        sha256 = "0ajz9wsf46a2l3pds7v62xbhq2cffj7wrilamkx2z8r28m0k61iy";
        libName = "anstyle_wincon";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "once_cell_polyfill";
            packageId = "once_cell_polyfill";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.60.2";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Console" "Win32_Foundation" ];
          }
        ];

      };
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.99";
        edition = "2018";
        sha256 = "001icqvkfl28rxxmk99rm4gvdzxqngj5v50yg2bh3dzcvqfllrxh";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "async-broadcast" = rec {
        crateName = "async-broadcast";
        version = "0.7.2";
        edition = "2021";
        sha256 = "0ckmqcwyqwbl2cijk1y4r0vy60i89gqc86ijrxzz5f2m4yjqfnj3";
        libName = "async_broadcast";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Yoshua Wuyts <yoshuawuyts@gmail.com>"
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener";
          }
          {
            name = "event-listener-strategy";
            packageId = "event-listener-strategy";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];

      };
      "async-channel" = rec {
        crateName = "async-channel";
        version = "2.5.0";
        edition = "2021";
        sha256 = "1ljq24ig8lgs2555myrrjighycpx2mbjgrm3q7lpa6rdsmnxjklj";
        libName = "async_channel";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            usesDefaultFeatures = false;
          }
          {
            name = "event-listener-strategy";
            packageId = "event-listener-strategy";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "portable-atomic" = [ "concurrent-queue/portable-atomic" "event-listener-strategy/portable-atomic" "dep:portable-atomic-util" "dep:portable-atomic" ];
          "std" = [ "concurrent-queue/std" "event-listener-strategy/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "async-executor" = rec {
        crateName = "async-executor";
        version = "1.13.3";
        edition = "2021";
        sha256 = "1f3za9v8wkqzv6rz69g0qzvdcmghwbixijwzldwjm9w3zph00z29";
        libName = "async_executor";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "async-task";
            packageId = "async-task";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
          }
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
            usesDefaultFeatures = false;
            target = { target, features }: (builtins.elem "wasm" target."family");
            features = [ "std" ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "slab";
            packageId = "slab";
          }
        ];
        devDependencies = [
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
          }
        ];
        features = {
        };
      };
      "async-fs" = rec {
        crateName = "async-fs";
        version = "2.1.3";
        edition = "2021";
        sha256 = "0l1fddv8iigpcin109sq40gb5kr5hsp7vi4ifsbjl2yq1ryf7xq9";
        libName = "async_fs";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-lock";
            packageId = "async-lock";
          }
          {
            name = "blocking";
            packageId = "blocking";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
          }
        ];

      };
      "async-io" = rec {
        crateName = "async-io";
        version = "2.5.0";
        edition = "2021";
        sha256 = "1ji3y970jdnc6xa3905zbhlln62wrrl13lwzy0hg57h16rilsqqr";
        libName = "async_io";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-lock";
            packageId = "async-lock";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
            usesDefaultFeatures = false;
          }
          {
            name = "parking";
            packageId = "parking";
          }
          {
            name = "polling";
            packageId = "polling";
          }
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            features = [ "fs" "net" "std" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.60.2";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" ];
          }
        ];
        features = {
          "tracing" = [ "dep:tracing" ];
        };
      };
      "async-lock" = rec {
        crateName = "async-lock";
        version = "3.4.1";
        edition = "2021";
        sha256 = "1p6i1sw3mwv1msdx9jqkr0h0a2jlrp3717yyx5n9pvkw0h23dl2z";
        libName = "async_lock";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener";
            usesDefaultFeatures = false;
          }
          {
            name = "event-listener-strategy";
            packageId = "event-listener-strategy";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "event-listener/loom" "dep:loom" ];
          "std" = [ "event-listener/std" "event-listener-strategy/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "async-net" = rec {
        crateName = "async-net";
        version = "2.0.0";
        edition = "2021";
        sha256 = "1xyc5a5vcp3a7h1q2lbfh79wz8136dig4q4x6g4w2ws8ml7h0j5r";
        libName = "async_net";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-io";
            packageId = "async-io";
          }
          {
            name = "blocking";
            packageId = "blocking";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
          }
        ];

      };
      "async-process" = rec {
        crateName = "async-process";
        version = "2.4.0";
        edition = "2021";
        sha256 = "004zcsyvny8fl77j6y9kbc9pbg22j4lh370v3amycldd48vs3nk5";
        libName = "async_process";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-channel";
            packageId = "async-channel";
            target = { target, features }: ((target."windows" or false) || ("linux" == target."os" or null));
          }
          {
            name = "async-io";
            packageId = "async-io";
          }
          {
            name = "async-lock";
            packageId = "async-lock";
          }
          {
            name = "async-signal";
            packageId = "async-signal";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "async-task";
            packageId = "async-task";
            target = { target, features }: ((target."windows" or false) || ("linux" == target."os" or null));
          }
          {
            name = "blocking";
            packageId = "blocking";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "event-listener";
            packageId = "event-listener";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
          }
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
            features = [ "std" "fs" "process" ];
          }
        ];
        features = {
          "tracing" = [ "dep:tracing" ];
        };
      };
      "async-recursion" = rec {
        crateName = "async-recursion";
        version = "1.1.1";
        edition = "2018";
        sha256 = "04ac4zh8qz2xjc79lmfi4jlqj5f92xjvfaqvbzwkizyqd4pl4hrv";
        procMacro = true;
        libName = "async_recursion";
        authors = [
          "Robert Usher <266585+dcchut@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "full" "visit-mut" "parsing" "printing" "proc-macro" "clone-impls" ];
          }
        ];

      };
      "async-signal" = rec {
        crateName = "async-signal";
        version = "0.2.12";
        edition = "2021";
        sha256 = "1hg3wchajq47frfsh54jpdpkwxihl87cwq5mq991v7pn1qkayrzm";
        libName = "async_signal";
        authors = [
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "async-io";
            packageId = "async-io";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "async-lock";
            packageId = "async-lock";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "atomic-waker";
            packageId = "atomic-waker";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
            features = [ "process" "std" ];
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "slab";
            packageId = "slab";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.60.2";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Console" ];
          }
        ];
        devDependencies = [
          {
            name = "async-io";
            packageId = "async-io";
          }
        ];

      };
      "async-task" = rec {
        crateName = "async-task";
        version = "4.7.1";
        edition = "2021";
        sha256 = "1pp3avr4ri2nbh7s6y9ws0397nkx1zymmcr14sq761ljarh3axcb";
        libName = "async_task";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "async-trait" = rec {
        crateName = "async-trait";
        version = "0.1.89";
        edition = "2021";
        sha256 = "1fsxxmz3rzx1prn1h3rs7kyjhkap60i7xvi0ldapkvbb14nssdch";
        procMacro = true;
        libName = "async_trait";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "full" "parsing" "printing" "proc-macro" "visit-mut" ];
          }
        ];

      };
      "atomic-waker" = rec {
        crateName = "atomic-waker";
        version = "1.1.2";
        edition = "2018";
        sha256 = "1h5av1lw56m0jf0fd3bchxq8a30xv0b4wv8s4zkp4s0i7mfvs18m";
        libName = "atomic_waker";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        features = {
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.5.0";
        edition = "2015";
        sha256 = "1s77f98id9l4af4alklmzq46f21c980v13z2r1pcxx6bqgw0d1n0";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];

      };
      "bitflags" = rec {
        crateName = "bitflags";
        version = "2.9.4";
        edition = "2021";
        sha256 = "157kkcv8s7vk6d17dar1pa5cqcz4c8pdrn16wm1ld7jnr86d2q92";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "blocking" = rec {
        crateName = "blocking";
        version = "1.6.2";
        edition = "2021";
        sha256 = "08bz3f9agqlp3102snkvsll6wc9ag7x5m1xy45ak2rv9pq18sgz8";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-channel";
            packageId = "async-channel";
          }
          {
            name = "async-task";
            packageId = "async-task";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
            usesDefaultFeatures = false;
          }
          {
            name = "piper";
            packageId = "piper";
          }
        ];
        devDependencies = [
          {
            name = "futures-lite";
            packageId = "futures-lite";
          }
        ];
        features = {
          "tracing" = [ "dep:tracing" ];
        };
      };
      "bluegent" = rec {
        crateName = "bluegent";
        version = "0.1.0";
        edition = "2024";
        crateBin = [
          {
            name = "bluegent";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ../.; };
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "env_logger";
            packageId = "env_logger";
            usesDefaultFeatures = false;
            features = [ "auto-color" "humantime" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "smol";
            packageId = "smol";
          }
          {
            name = "toml";
            packageId = "toml";
            usesDefaultFeatures = false;
            features = [ "parse" "serde" "std" ];
          }
          {
            name = "zbus";
            packageId = "zbus";
            usesDefaultFeatures = false;
            features = [ "async-io" ];
          }
        ];

      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "1.0.3";
        edition = "2018";
        sha256 = "1afg7146gbxjvkbjx7i5sdrpqp9q5akmk9004fr8rsm90jf2il9g";
        libName = "cfg_if";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" ];
        };
      };
      "cfg_aliases" = rec {
        crateName = "cfg_aliases";
        version = "0.2.1";
        edition = "2018";
        sha256 = "092pxdc1dbgjb6qvh83gk56rkic2n2ybm4yvy76cgynmzi3zwfk1";
        authors = [
          "Zicklag <zicklag@katharostech.com>"
        ];

      };
      "colorchoice" = rec {
        crateName = "colorchoice";
        version = "1.0.4";
        edition = "2021";
        sha256 = "0x8ymkz1xr77rcj1cfanhf416pc4v681gmkc9dzb3jqja7f62nxh";

      };
      "concurrent-queue" = rec {
        crateName = "concurrent-queue";
        version = "2.5.0";
        edition = "2021";
        sha256 = "0wrr3mzq2ijdkxwndhf79k952cp4zkz35ray8hvsxl96xrx1k82c";
        libName = "concurrent_queue";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Taiki Endo <te316e89@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-utils" = rec {
        crateName = "crossbeam-utils";
        version = "0.8.21";
        edition = "2021";
        sha256 = "0a3aa2bmc8q35fb67432w16wvi54sfmb69rk9h5bhd18vw0c99fh";
        libName = "crossbeam_utils";
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
        };
      };
      "endi" = rec {
        crateName = "endi";
        version = "1.1.0";
        edition = "2021";
        sha256 = "1gxp388g2zzbncp3rdn60wxkr49xbhhx94nl9p4a6c41w4ma7n53";
        authors = [
          "Zeeshan Ali Khan <zeenix@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "enumflags2" = rec {
        crateName = "enumflags2";
        version = "0.7.12";
        edition = "2018";
        sha256 = "1vzcskg4dca2jiflsfx1p9yw1fvgzcakcs7cpip0agl51ilgf9qh";
        authors = [
          "maik klein <maikklein@googlemail.com>"
          "Maja Kądziołka <maya@compilercrim.es>"
        ];
        dependencies = [
          {
            name = "enumflags2_derive";
            packageId = "enumflags2_derive";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "enumflags2_derive" = rec {
        crateName = "enumflags2_derive";
        version = "0.7.12";
        edition = "2018";
        sha256 = "09rqffacafl1b83ir55hrah9gza0x7pzjn6lr6jm76fzix6qmiv7";
        procMacro = true;
        authors = [
          "maik klein <maikklein@googlemail.com>"
          "Maja Kądziołka <maya@compilercrim.es>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "parsing" "printing" "derive" "proc-macro" ];
          }
        ];

      };
      "env_filter" = rec {
        crateName = "env_filter";
        version = "0.1.3";
        edition = "2021";
        sha256 = "1l4p6f845cylripc3zkxa0lklk8rn2q86fqm522p6l2cknjhavhq";
        dependencies = [
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
        ];
        features = {
          "default" = [ "regex" ];
          "regex" = [ "dep:regex" ];
        };
      };
      "env_logger" = rec {
        crateName = "env_logger";
        version = "0.11.8";
        edition = "2021";
        sha256 = "17q6zbjam4wq75fa3m4gvvmv3rj3ch25abwbm84b28a0j3q67j0k";
        dependencies = [
          {
            name = "anstream";
            packageId = "anstream";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "wincon" ];
          }
          {
            name = "anstyle";
            packageId = "anstyle";
            optional = true;
          }
          {
            name = "env_filter";
            packageId = "env_filter";
            usesDefaultFeatures = false;
          }
          {
            name = "jiff";
            packageId = "jiff";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
        ];
        features = {
          "auto-color" = [ "color" "anstream/auto" ];
          "color" = [ "dep:anstream" "dep:anstyle" ];
          "default" = [ "auto-color" "humantime" "regex" ];
          "humantime" = [ "dep:jiff" ];
          "kv" = [ "log/kv" ];
          "regex" = [ "env_filter/regex" ];
          "unstable-kv" = [ "kv" ];
        };
        resolvedDefaultFeatures = [ "auto-color" "color" "humantime" ];
      };
      "equivalent" = rec {
        crateName = "equivalent";
        version = "1.0.2";
        edition = "2015";
        sha256 = "03swzqznragy8n0x31lqc78g2af054jwivp7lkrbrc0khz74lyl7";

      };
      "errno" = rec {
        crateName = "errno";
        version = "0.3.14";
        edition = "2018";
        sha256 = "1szgccmh8vgryqyadg8xd58mnwwicf39zmin3bsn63df2wbbgjir";
        authors = [
          "Chris Wong <lambda.fairy@gmail.com>"
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.61.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Diagnostics_Debug" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "libc/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "event-listener" = rec {
        crateName = "event-listener";
        version = "5.4.1";
        edition = "2021";
        sha256 = "1asnp3agbr8shcl001yd935m167ammyi8hnvl0q1ycajryn6cfz1";
        libName = "event_listener";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            usesDefaultFeatures = false;
          }
          {
            name = "parking";
            packageId = "parking";
            optional = true;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "critical-section" = [ "dep:critical-section" ];
          "default" = [ "std" ];
          "loom" = [ "concurrent-queue/loom" "parking?/loom" "dep:loom" ];
          "parking" = [ "dep:parking" ];
          "portable-atomic" = [ "portable-atomic-util" "portable_atomic_crate" "concurrent-queue/portable-atomic" ];
          "portable-atomic-util" = [ "dep:portable-atomic-util" ];
          "portable_atomic_crate" = [ "dep:portable_atomic_crate" ];
          "std" = [ "concurrent-queue/std" "parking" ];
        };
        resolvedDefaultFeatures = [ "default" "parking" "std" ];
      };
      "event-listener-strategy" = rec {
        crateName = "event-listener-strategy";
        version = "0.5.4";
        edition = "2021";
        sha256 = "14rv18av8s7n8yixg38bxp5vg2qs394rl1w052by5npzmbgz7scb";
        libName = "event_listener_strategy";
        authors = [
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "event-listener/loom" ];
          "portable-atomic" = [ "event-listener/portable-atomic" ];
          "std" = [ "event-listener/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "fastrand" = rec {
        crateName = "fastrand";
        version = "2.3.0";
        edition = "2018";
        sha256 = "1ghiahsw1jd68df895cy5h3gzwk30hndidn3b682zmshpgmrx41p";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "getrandom" = [ "dep:getrandom" ];
          "js" = [ "std" "getrandom" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0gk6yrxgi5ihfanm2y431jadrll00n5ifhnpx090c2f2q1cr1wh5";
        libName = "futures_core";
        features = {
          "default" = [ "std" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-io" = rec {
        crateName = "futures-io";
        version = "0.3.31";
        edition = "2018";
        sha256 = "1ikmw1yfbgvsychmsihdkwa8a1knank2d9a8dk01mbjar9w1np4y";
        libName = "futures_io";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "futures-lite" = rec {
        crateName = "futures-lite";
        version = "2.6.1";
        edition = "2021";
        sha256 = "1ba4dg26sc168vf60b1a23dv1d8rcf3v3ykz2psb7q70kxh113pp";
        libName = "futures_lite";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        dependencies = [
          {
            name = "fastrand";
            packageId = "fastrand";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "parking";
            packageId = "parking";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "race" "std" ];
          "fastrand" = [ "dep:fastrand" ];
          "futures-io" = [ "dep:futures-io" ];
          "memchr" = [ "dep:memchr" ];
          "parking" = [ "dep:parking" ];
          "race" = [ "fastrand" ];
          "std" = [ "alloc" "fastrand/std" "futures-io" "parking" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "fastrand" "futures-io" "parking" "race" "std" ];
      };
      "getrandom" = rec {
        crateName = "getrandom";
        version = "0.3.3";
        edition = "2021";
        sha256 = "1x6jl875zp6b2b6qp9ghc84b0l76bvng2lvm8zfcmwjl7rb5w516";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((("linux" == target."os" or null) || ("android" == target."os" or null)) && (!((("linux" == target."os" or null) && ("" == target."env" or null)) || ("custom" == target."getrandom_backend" or null) || ("linux_raw" == target."getrandom_backend" or null) || ("rdrand" == target."getrandom_backend" or null) || ("rndr" == target."getrandom_backend" or null))));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("hurd" == target."os" or null) || ("illumos" == target."os" or null) || ("cygwin" == target."os" or null) || (("horizon" == target."os" or null) && ("arm" == target."arch" or null)));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("haiku" == target."os" or null) || ("redox" == target."os" or null) || ("nto" == target."os" or null) || ("aix" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("ios" == target."os" or null) || ("visionos" == target."os" or null) || ("watchos" == target."os" or null) || ("tvos" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("macos" == target."os" or null) || ("openbsd" == target."os" or null) || ("vita" == target."os" or null) || ("emscripten" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("netbsd" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("solaris" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("vxworks" == target."os" or null);
          }
          {
            name = "r-efi";
            packageId = "r-efi";
            usesDefaultFeatures = false;
            target = { target, features }: (("uefi" == target."os" or null) && ("efi_rng" == target."getrandom_backend" or null));
          }
          {
            name = "wasi";
            packageId = "wasi";
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && ("wasi" == target."os" or null) && ("p2" == target."env" or null));
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "dep:compiler_builtins" "dep:core" ];
          "wasm_js" = [ "dep:wasm-bindgen" "dep:js-sys" ];
        };
      };
      "hashbrown" = rec {
        crateName = "hashbrown";
        version = "0.15.5";
        edition = "2021";
        sha256 = "189qaczmjxnikm9db748xyhiw04kpmhm9xj9k9hg0sgx7pjwyacj";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "allocator-api2" = [ "dep:allocator-api2" ];
          "core" = [ "dep:core" ];
          "default" = [ "default-hasher" "inline-more" "allocator-api2" "equivalent" "raw-entry" ];
          "default-hasher" = [ "dep:foldhash" ];
          "equivalent" = [ "dep:equivalent" ];
          "nightly" = [ "bumpalo/allocator_api" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "hermit-abi" = rec {
        crateName = "hermit-abi";
        version = "0.5.1";
        edition = "2021";
        sha256 = "026bh0y8gpfd62gjm7gx6nyf6bgdyxdn0jc67i1ysl37hm3cwm7i";
        libName = "hermit_abi";
        authors = [
          "Stefan Lankes"
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hex" = rec {
        crateName = "hex";
        version = "0.4.3";
        edition = "2018";
        sha256 = "0w1a4davm1lgzpamwnba907aysmlrnygbqmfis2mqjx5m552a93z";
        authors = [
          "KokaKiwi <kokakiwi@kokakiwi.net>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "indexmap" = rec {
        crateName = "indexmap";
        version = "2.11.1";
        edition = "2021";
        sha256 = "088rg9dlk7lmw5hz5yi4jdyif25mrsj7lgwd5ska93y6mr180si0";
        dependencies = [
          {
            name = "equivalent";
            packageId = "equivalent";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "serde" = [ "dep:serde" ];
          "sval" = [ "dep:sval" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "is_terminal_polyfill" = rec {
        crateName = "is_terminal_polyfill";
        version = "1.70.1";
        edition = "2021";
        sha256 = "1kwfgglh91z33kl0w5i338mfpa3zs0hidq5j4ny4rmjwrikchhvr";
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "jiff" = rec {
        crateName = "jiff";
        version = "0.2.15";
        edition = "2021";
        sha256 = "0jby6kbs2ra33ji0rx4swcp66jzmcvgszc5v4izwfsgbn6w967xy";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "jiff-static";
            packageId = "jiff-static";
            optional = true;
          }
          {
            name = "jiff-static";
            packageId = "jiff-static";
            target = { target, features }: false;
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "portable-atomic";
            packageId = "portable-atomic";
            usesDefaultFeatures = false;
            target = { target, features }: (!("ptr" == target."has_atomic" or null));
          }
          {
            name = "portable-atomic-util";
            packageId = "portable-atomic-util";
            usesDefaultFeatures = false;
            target = { target, features }: (!("ptr" == target."has_atomic" or null));
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" "portable-atomic-util/alloc" ];
          "default" = [ "std" "tz-system" "tz-fat" "tzdb-bundle-platform" "tzdb-zoneinfo" "tzdb-concatenated" "perf-inline" ];
          "js" = [ "dep:wasm-bindgen" "dep:js-sys" ];
          "logging" = [ "dep:log" ];
          "serde" = [ "dep:serde" ];
          "static" = [ "static-tz" "jiff-static?/tzdb" ];
          "static-tz" = [ "dep:jiff-static" ];
          "std" = [ "alloc" "log?/std" "serde?/std" ];
          "tz-fat" = [ "jiff-static?/tz-fat" ];
          "tz-system" = [ "std" "dep:windows-sys" ];
          "tzdb-bundle-always" = [ "dep:jiff-tzdb" "alloc" ];
          "tzdb-bundle-platform" = [ "dep:jiff-tzdb-platform" "alloc" ];
          "tzdb-concatenated" = [ "std" ];
          "tzdb-zoneinfo" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "jiff-static" = rec {
        crateName = "jiff-static";
        version = "0.2.15";
        edition = "2021";
        sha256 = "1d4l4pvlhz3w487gyhnzvagpbparspv4c8f35qk6g5w9zx8k8d03";
        procMacro = true;
        libName = "jiff_static";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
        features = {
          "tzdb" = [ "dep:jiff-tzdb" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.175";
        edition = "2021";
        sha256 = "0hw5sb3gjr0ivah7s3fmavlpvspjpd4mr009abmam2sr7r4sx0ka";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "rustc-std-workspace-core" = [ "dep:rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "extra_traits" "std" ];
      };
      "linux-raw-sys" = rec {
        crateName = "linux-raw-sys";
        version = "0.11.0";
        edition = "2021";
        sha256 = "0fghx0nn8nvbz5yzgizfcwd6ap2pislp68j8c1bwyr6sacxkq7fz";
        libName = "linux_raw_sys";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        features = {
          "core" = [ "dep:core" ];
          "default" = [ "std" "general" "errno" ];
          "rustc-dep-of-std" = [ "core" "no_std" ];
        };
        resolvedDefaultFeatures = [ "auxvec" "elf" "errno" "general" "if_ether" "ioctl" "net" "netlink" "no_std" "prctl" "xdp" ];
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.28";
        edition = "2021";
        sha256 = "0cklpzrpxafbaq1nyxarhnmcw9z3xcjrad3ch55mmr58xw2ha21l";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "kv_serde" = [ "kv_std" "value-bag/serde" "serde" ];
          "kv_std" = [ "std" "kv" "value-bag/error" ];
          "kv_sval" = [ "kv" "value-bag/sval" "sval" "sval_ref" ];
          "kv_unstable" = [ "kv" "value-bag" ];
          "kv_unstable_serde" = [ "kv_serde" "kv_unstable_std" ];
          "kv_unstable_std" = [ "kv_std" "kv_unstable" ];
          "kv_unstable_sval" = [ "kv_sval" "kv_unstable" ];
          "serde" = [ "dep:serde" ];
          "sval" = [ "dep:sval" ];
          "sval_ref" = [ "dep:sval_ref" ];
          "value-bag" = [ "dep:value-bag" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.7.5";
        edition = "2021";
        sha256 = "1h2bh2jajkizz04fh047lpid5wgw2cr9igpkdhl3ibzscpd858ij";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "logging" = [ "dep:log" ];
          "rustc-dep-of-std" = [ "core" ];
          "std" = [ "alloc" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "memoffset" = rec {
        crateName = "memoffset";
        version = "0.9.1";
        edition = "2015";
        sha256 = "12i17wh9a9plx869g7j4whf62xw68k5zd4k0k5nh6ys5mszid028";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "nix" = rec {
        crateName = "nix";
        version = "0.30.1";
        edition = "2021";
        sha256 = "1dixahq9hk191g0c2ydc0h1ppxj0xw536y6rl63vlnp06lx3ylkl";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
          {
            name = "memoffset";
            packageId = "memoffset";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        features = {
          "aio" = [ "pin-utils" ];
          "dir" = [ "fs" ];
          "event" = [ "poll" ];
          "memoffset" = [ "dep:memoffset" ];
          "mount" = [ "uio" ];
          "mqueue" = [ "fs" ];
          "net" = [ "socket" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "ptrace" = [ "process" ];
          "sched" = [ "process" ];
          "signal" = [ "process" ];
          "socket" = [ "memoffset" ];
          "ucontext" = [ "signal" ];
          "user" = [ "feature" ];
          "zerocopy" = [ "fs" "uio" ];
        };
        resolvedDefaultFeatures = [ "feature" "memoffset" "socket" "uio" "user" ];
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.21.3";
        edition = "2021";
        sha256 = "0b9x77lb9f1j6nqgf5aka4s2qj0nly176bpbrv6f9iakk5ff3xa2";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "alloc" = [ "race" ];
          "atomic-polyfill" = [ "critical-section" ];
          "critical-section" = [ "dep:critical-section" "portable-atomic" ];
          "default" = [ "std" ];
          "parking_lot" = [ "dep:parking_lot_core" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "race" "std" ];
      };
      "once_cell_polyfill" = rec {
        crateName = "once_cell_polyfill";
        version = "1.70.1";
        edition = "2021";
        sha256 = "1bg0w99srq8h4mkl68l1mza2n2f2hvrg0n8vfa3izjr5nism32d4";
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "ordered-stream" = rec {
        crateName = "ordered-stream";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0l0xxp697q7wiix1gnfn66xsss7fdhfivl2k7bvpjs4i3lgb18ls";
        libName = "ordered_stream";
        authors = [
          "Daniel De Graaf <code@danieldg.net>"
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];

      };
      "parking" = rec {
        crateName = "parking";
        version = "2.2.1";
        edition = "2018";
        sha256 = "1fnfgmzkfpjd69v4j9x737b1k8pnn054bvzcn5dm3pkgq595d3gk";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "The Rust Project Developers"
        ];
        features = {
          "loom" = [ "dep:loom" ];
        };
      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.2.16";
        edition = "2018";
        sha256 = "16wzc7z7dfkf9bmjin22f5282783f6mdksnr0nv0j5ym5f9gyg1v";
        libName = "pin_project_lite";

      };
      "piper" = rec {
        crateName = "piper";
        version = "0.2.4";
        edition = "2018";
        sha256 = "0rn0mjjm0cwagdkay77wgmz3sqf8fqmv9d9czm79mvr2yj8c9j4n";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "atomic-waker";
            packageId = "atomic-waker";
          }
          {
            name = "fastrand";
            packageId = "fastrand";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "futures-io" = [ "dep:futures-io" ];
          "portable-atomic" = [ "atomic-waker/portable-atomic" "portable_atomic_crate" "portable-atomic-util" ];
          "portable-atomic-util" = [ "dep:portable-atomic-util" ];
          "portable_atomic_crate" = [ "dep:portable_atomic_crate" ];
          "std" = [ "fastrand/std" "futures-io" ];
        };
        resolvedDefaultFeatures = [ "default" "futures-io" "std" ];
      };
      "polling" = rec {
        crateName = "polling";
        version = "3.10.0";
        edition = "2021";
        sha256 = "0afqlnm45081k06sngc052k9vmh33j2rqrmjgi7q1zjhcca1kgdm";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "rustix";
            packageId = "rustix";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) || ("fuchsia" == target."os" or null) || ("vxworks" == target."os" or null));
            features = [ "event" "fs" "pipe" "process" "std" "time" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.60.2";
            target = { target, features }: (target."windows" or false);
            features = [ "Wdk_Foundation" "Wdk_Storage_FileSystem" "Win32_Foundation" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_LibraryLoader" "Win32_System_Threading" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
          "tracing" = [ "dep:tracing" ];
        };
      };
      "portable-atomic" = rec {
        crateName = "portable-atomic";
        version = "1.11.1";
        edition = "2018";
        sha256 = "10s4cx9y3jvw0idip09ar52s2kymq8rq9a668f793shn1ar6fhpq";
        libName = "portable_atomic";
        features = {
          "critical-section" = [ "dep:critical-section" ];
          "default" = [ "fallback" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "require-cas" ];
      };
      "portable-atomic-util" = rec {
        crateName = "portable-atomic-util";
        version = "0.2.4";
        edition = "2018";
        sha256 = "01rmx1li07ixsx3sqg2bxqrkzk7b5n8pibwwf2589ms0s3cg18nq";
        libName = "portable_atomic_util";
        dependencies = [
          {
            name = "portable-atomic";
            packageId = "portable-atomic";
            usesDefaultFeatures = false;
            features = [ "require-cas" ];
          }
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "proc-macro-crate" = rec {
        crateName = "proc-macro-crate";
        version = "3.3.0";
        edition = "2021";
        sha256 = "0d9xlymplfi9yv3f5g4bp0d6qh70apnihvqcjllampx4f5lmikpd";
        libName = "proc_macro_crate";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "toml_edit";
            packageId = "toml_edit";
            usesDefaultFeatures = false;
            features = [ "parse" ];
          }
        ];

      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.101";
        edition = "2021";
        sha256 = "1pijhychkpl7rcyf1h7mfk6gjfii1ywf5n0snmnqs5g4hvyl7bl9";
        libName = "proc_macro2";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.40";
        edition = "2018";
        sha256 = "1394cxjg6nwld82pzp2d4fp6pmaz32gai1zh9z5hvh0dawww118q";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "r-efi" = rec {
        crateName = "r-efi";
        version = "5.3.0";
        edition = "2018";
        sha256 = "03sbfm3g7myvzyylff6qaxk4z6fy76yv860yy66jiswc2m6b7kb9";
        libName = "r_efi";
        features = {
          "core" = [ "dep:core" ];
          "examples" = [ "native" ];
          "rustc-dep-of-std" = [ "core" ];
        };
      };
      "rustix" = rec {
        crateName = "rustix";
        version = "1.1.2";
        edition = "2021";
        sha256 = "0gpz343xfzx16x82s1x336n0kr49j02cvhgxdvaq86jmqnigh5fd";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
          "Jakub Konka <kubkon@jakubkonka.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
            usesDefaultFeatures = false;
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys";
            usesDefaultFeatures = false;
            target = { target, features }: ((("linux" == target."os" or null)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
            features = [ "general" "ioctl" "no_std" ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
            features = [ "auxvec" "general" "errno" "ioctl" "no_std" "elf" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.61.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" ];
          }
        ];
        devDependencies = [
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "all-apis" = [ "event" "fs" "io_uring" "mm" "mount" "net" "param" "pipe" "process" "pty" "rand" "runtime" "shm" "stdio" "system" "termios" "thread" "time" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "io_uring" = [ "event" "fs" "net" "thread" "linux-raw-sys/io_uring" ];
          "libc" = [ "dep:libc" ];
          "libc_errno" = [ "dep:libc_errno" ];
          "linux_5_1" = [ "linux_4_11" ];
          "linux_5_11" = [ "linux_5_1" ];
          "linux_latest" = [ "linux_5_11" ];
          "net" = [ "linux-raw-sys/net" "linux-raw-sys/netlink" "linux-raw-sys/if_ether" "linux-raw-sys/xdp" ];
          "process" = [ "linux-raw-sys/prctl" ];
          "pty" = [ "fs" ];
          "runtime" = [ "linux-raw-sys/prctl" ];
          "rustc-dep-of-std" = [ "core" "rustc-std-workspace-alloc" "linux-raw-sys/rustc-dep-of-std" "bitflags/rustc-dep-of-std" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
          "shm" = [ "fs" ];
          "std" = [ "bitflags/std" "alloc" "libc?/std" "libc_errno?/std" ];
          "system" = [ "linux-raw-sys/system" ];
          "thread" = [ "linux-raw-sys/prctl" ];
          "use-libc" = [ "libc_errno" "libc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "event" "fs" "net" "pipe" "process" "std" "time" ];
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.221";
        edition = "2021";
        sha256 = "0hzc35h8lpaf3mwb74i7r9yqfg2810ail4sfxc2qfi929bh7f61l";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_core";
            packageId = "serde_core";
            usesDefaultFeatures = false;
            features = [ "result" ];
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "serde_core/alloc" ];
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
          "rc" = [ "serde_core/rc" ];
          "serde_derive" = [ "dep:serde_derive" ];
          "std" = [ "serde_core/std" ];
          "unstable" = [ "serde_core/unstable" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "derive" "serde_derive" "std" ];
      };
      "serde_core" = rec {
        crateName = "serde_core";
        version = "1.0.221";
        edition = "2021";
        sha256 = "1zh0imnwpjn3r3hddv4niivy1q8dc94b257w0fs0r12cl709ni8c";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" "result" ];
        };
        resolvedDefaultFeatures = [ "alloc" "result" "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.221";
        edition = "2021";
        sha256 = "1c2s6mlljydl1g23f05yibjp2wjp32app1pzn5i0xqhpa7vmq66n";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "derive" "parsing" "printing" "proc-macro" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_repr" = rec {
        crateName = "serde_repr";
        version = "0.1.20";
        edition = "2021";
        sha256 = "1755gss3f6lwvv23pk7fhnjdkjw7609rcgjlr8vjg6791blf6php";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];

      };
      "serde_spanned" = rec {
        crateName = "serde_spanned";
        version = "1.0.0";
        edition = "2021";
        sha256 = "10rv91337k8x8zmfir4h8aiwmwgkq07gdv7h0jxhcwwgk10lqws0";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" ];
          "default" = [ "std" "serde" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "serde?/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "serde" "std" ];
      };
      "signal-hook-registry" = rec {
        crateName = "signal-hook-registry";
        version = "1.4.5";
        edition = "2015";
        sha256 = "042lkqrpnlrgvrrcirgigxyp1zk70d8v0fsr5w7a18k3bw2vh0wj";
        libName = "signal_hook_registry";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Masaki Hara <ackie.h.gmai@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.11";
        edition = "2018";
        sha256 = "12bm4s88rblq02jjbi1dw31984w61y2ldn13ifk5gsqgy97f8aks";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "smol" = rec {
        crateName = "smol";
        version = "2.0.2";
        edition = "2018";
        sha256 = "17srgkyzswns43cnqcfb1846a8nsna47qj7wrk1rj8c9c3id6fx3";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-channel";
            packageId = "async-channel";
          }
          {
            name = "async-executor";
            packageId = "async-executor";
          }
          {
            name = "async-fs";
            packageId = "async-fs";
          }
          {
            name = "async-io";
            packageId = "async-io";
          }
          {
            name = "async-lock";
            packageId = "async-lock";
          }
          {
            name = "async-net";
            packageId = "async-net";
          }
          {
            name = "async-process";
            packageId = "async-process";
            target = { target, features }: (!("espidf" == target."os" or null));
          }
          {
            name = "blocking";
            packageId = "blocking";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
          }
        ];

      };
      "static_assertions" = rec {
        crateName = "static_assertions";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0gsl6xmw10gvn3zs1rv99laj5ig7ylffnh71f9l34js4nr4r7sx2";
        authors = [
          "Nikolai Vazquez"
        ];
        features = {
        };
      };
      "syn" = rec {
        crateName = "syn";
        version = "2.0.106";
        edition = "2021";
        sha256 = "19mddxp1ia00hfdzimygqmr1jqdvyl86k48427bkci4d08wc9rzd";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "dep:quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote?/proc-macro" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "fold" "full" "parsing" "printing" "proc-macro" "visit-mut" ];
      };
      "tempfile" = rec {
        crateName = "tempfile";
        version = "3.22.0";
        edition = "2021";
        sha256 = "0lza9r7dzm4k9fghw24yql6iz59wq8xgs46a7i29ir6xz88lvyl4";
        authors = [
          "Steven Allen <steven@stebalien.com>"
          "The Rust Project Developers"
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Jason White <me@jasonwhite.io>"
        ];
        dependencies = [
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "getrandom";
            packageId = "getrandom";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) || (target."windows" or false) || ("wasi" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustix";
            packageId = "rustix";
            target = { target, features }: ((target."unix" or false) || ("wasi" == target."os" or null));
            features = [ "fs" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.61.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Storage_FileSystem" "Win32_Foundation" ];
          }
        ];
        features = {
          "default" = [ "getrandom" ];
          "getrandom" = [ "dep:getrandom" ];
        };
        resolvedDefaultFeatures = [ "default" "getrandom" ];
      };
      "toml" = rec {
        crateName = "toml";
        version = "0.9.5";
        edition = "2021";
        sha256 = "1s7n4l40hvpf46jmgidfknnzpyblz4hip7gfkymgn2q0qlfrw4km";
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime 0.7.0";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "toml_parser";
            packageId = "toml_parser";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "toml_writer";
            packageId = "toml_writer";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "winnow";
            packageId = "winnow";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "debug" = [ "std" "toml_parser?/debug" "dep:anstream" "dep:anstyle" ];
          "default" = [ "std" "serde" "parse" "display" ];
          "display" = [ "dep:toml_writer" ];
          "fast_hash" = [ "preserve_order" "dep:foldhash" ];
          "parse" = [ "dep:toml_parser" "dep:winnow" ];
          "preserve_order" = [ "dep:indexmap" "std" ];
          "serde" = [ "dep:serde" "toml_datetime/serde" "serde_spanned/serde" ];
          "std" = [ "indexmap?/std" "serde?/std" "toml_parser?/std" "toml_writer?/std" "toml_datetime/std" "serde_spanned/std" ];
        };
        resolvedDefaultFeatures = [ "parse" "serde" "std" ];
      };
      "toml_datetime 0.6.11" = rec {
        crateName = "toml_datetime";
        version = "0.6.11";
        edition = "2021";
        sha256 = "077ix2hb1dcya49hmi1avalwbixmrs75zgzb3b2i7g2gizwdmk92";
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "toml_datetime 0.7.0" = rec {
        crateName = "toml_datetime";
        version = "0.7.0";
        edition = "2021";
        sha256 = "1qwivxqkjxxwcqsvfhxnphpwphci0grdfk197wyxfn1gj0z1rpms";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "serde?/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "serde" "std" ];
      };
      "toml_edit" = rec {
        crateName = "toml_edit";
        version = "0.22.27";
        edition = "2021";
        sha256 = "16l15xm40404asih8vyjvnka9g0xs9i4hfb6ry3ph9g419k8rzj1";
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap";
            features = [ "std" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime 0.6.11";
          }
          {
            name = "winnow";
            packageId = "winnow";
            optional = true;
          }
        ];
        features = {
          "default" = [ "parse" "display" ];
          "display" = [ "dep:toml_write" ];
          "parse" = [ "dep:winnow" ];
          "perf" = [ "dep:kstring" ];
          "serde" = [ "dep:serde" "toml_datetime/serde" "dep:serde_spanned" ];
          "unstable-debug" = [ "winnow?/debug" ];
        };
        resolvedDefaultFeatures = [ "parse" ];
      };
      "toml_parser" = rec {
        crateName = "toml_parser";
        version = "1.0.2";
        edition = "2021";
        sha256 = "042wp5ni22yqcbrfqq9c63g2vbbp4m59zamxw97hvacs8ipqhldm";
        dependencies = [
          {
            name = "winnow";
            packageId = "winnow";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [ "std" "dep:anstream" "dep:anstyle" ];
          "default" = [ "std" ];
          "simd" = [ "winnow/simd" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "toml_writer" = rec {
        crateName = "toml_writer";
        version = "1.0.2";
        edition = "2021";
        sha256 = "0r7x3m050c66s9lssaq965vmrsxvxj131db4fq0m5vrd3w4l5j7w";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "tracing" = rec {
        crateName = "tracing";
        version = "0.1.41";
        edition = "2018";
        sha256 = "1l5xrzyjfyayrwhvhldfnwdyligi1mpqm8mzbi2m1d6y6p2hlkkq";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tracing-attributes";
            packageId = "tracing-attributes";
            optional = true;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "attributes" = [ "tracing-attributes" ];
          "default" = [ "std" "attributes" ];
          "log" = [ "dep:log" ];
          "log-always" = [ "log" ];
          "std" = [ "tracing-core/std" ];
          "tracing-attributes" = [ "dep:tracing-attributes" ];
          "valuable" = [ "tracing-core/valuable" ];
        };
        resolvedDefaultFeatures = [ "attributes" "default" "std" "tracing-attributes" ];
      };
      "tracing-attributes" = rec {
        crateName = "tracing-attributes";
        version = "0.1.30";
        edition = "2018";
        sha256 = "00v9bhfgfg3v101nmmy7s3vdwadb7ngc8c1iw6wai9vj9sv3lf41";
        procMacro = true;
        libName = "tracing_attributes";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <dbarsky@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "full" "parsing" "printing" "visit-mut" "clone-impls" "extra-traits" "proc-macro" ];
          }
        ];
        features = {
        };
      };
      "tracing-core" = rec {
        crateName = "tracing-core";
        version = "0.1.34";
        edition = "2018";
        sha256 = "0y3nc4mpnr79rzkrcylv5f5bnjjp19lsxwis9l4kzs97ya0jbldr";
        libName = "tracing_core";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" "valuable?/std" ];
          "once_cell" = [ "dep:once_cell" ];
          "std" = [ "once_cell" ];
          "valuable" = [ "dep:valuable" ];
        };
        resolvedDefaultFeatures = [ "once_cell" "std" ];
      };
      "uds_windows" = rec {
        crateName = "uds_windows";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1fb4y65pw0rsp0gyfyinjazlzxz1f6zv7j4zmb20l5pxwv1ypnl9";
        authors = [
          "Azure IoT Edge Devs"
          "Harald Hoyer <harald@redhat.com>"
        ];
        dependencies = [
          {
            name = "memoffset";
            packageId = "memoffset";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "winsock2" "ws2def" "minwinbase" "ntdef" "processthreadsapi" "handleapi" "ws2tcpip" "winbase" ];
          }
        ];

      };
      "unicode-ident" = rec {
        crateName = "unicode-ident";
        version = "1.0.18";
        edition = "2018";
        sha256 = "04k5r6sijkafzljykdq26mhjpmhdx4jwzvn1lh90g9ax9903jpss";
        libName = "unicode_ident";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "utf8parse" = rec {
        crateName = "utf8parse";
        version = "0.2.2";
        edition = "2018";
        sha256 = "088807qwjq46azicqwbhlmzwrbkz7l4hpw43sdkdyyk524vdxaq6";
        authors = [
          "Joe Wilm <joe@jwilm.com>"
          "Christian Duerr <contact@christianduerr.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "wasi" = rec {
        crateName = "wasi";
        version = "0.14.4+wasi-0.2.4";
        edition = "2021";
        sha256 = "0jpcy0qg3bvsclwyk1d11r3isd320rpickrl5hy9rx7s4jjg99c8";
        authors = [
          "The Cranelift Project Developers"
        ];
        dependencies = [
          {
            name = "wit-bindgen";
            packageId = "wit-bindgen";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "bitflags" = [ "wit-bindgen/bitflags" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" "bitflags" ];
          "rustc-dep-of-std" = [ "core" "alloc" "wit-bindgen/rustc-dep-of-std" ];
        };
      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "handleapi" "minwinbase" "ntdef" "processthreadsapi" "winbase" "winsock2" "ws2def" "ws2tcpip" ];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        libName = "winapi_i686_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        libName = "winapi_x86_64_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "windows-link 0.1.3" = rec {
        crateName = "windows-link";
        version = "0.1.3";
        edition = "2021";
        sha256 = "12kr1p46dbhpijr4zbwr2spfgq8i8c5x55mvvfmyl96m01cx4sjy";
        libName = "windows_link";
        authors = [
          "Microsoft"
        ];

      };
      "windows-link 0.2.0" = rec {
        crateName = "windows-link";
        version = "0.2.0";
        edition = "2021";
        sha256 = "0r9w2z96d5phmm185aq92z54jp9h2nqisa4wgc71idxbc436rr25";
        libName = "windows_link";

      };
      "windows-sys 0.60.2" = rec {
        crateName = "windows-sys";
        version = "0.60.2";
        edition = "2021";
        sha256 = "1jrbc615ihqnhjhxplr2kw7rasrskv9wj3lr80hgfd42sbj01xgj";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "Wdk" = [ "Win32_Foundation" ];
          "Wdk_Devices" = [ "Wdk" ];
          "Wdk_Devices_Bluetooth" = [ "Wdk_Devices" ];
          "Wdk_Devices_HumanInterfaceDevice" = [ "Wdk_Devices" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_NetworkManagement" = [ "Wdk" ];
          "Wdk_NetworkManagement_Ndis" = [ "Wdk_NetworkManagement" ];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = [ "Wdk_NetworkManagement" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_Memory" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32" = [ "Win32_Foundation" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_Beep" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Cdrom" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Dvd" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_Nfc" = [ "Win32_Devices" ];
          "Win32_Devices_Nfp" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_TraceLogging" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Wdk" "Wdk_Foundation" "Wdk_Storage" "Wdk_Storage_FileSystem" "Win32" "Win32_Foundation" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Security_Authorization" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Console" "Win32_System_IO" "Win32_System_LibraryLoader" "Win32_System_Memory" "Win32_System_Threading" "Win32_System_WindowsProgramming" "default" ];
      };
      "windows-sys 0.61.0" = rec {
        crateName = "windows-sys";
        version = "0.61.0";
        edition = "2021";
        sha256 = "1ajpwsmzfcsa1r7i0dxzvfn24dp3525rcd7aq95ydvdj8171h0g2";
        libName = "windows_sys";
        dependencies = [
          {
            name = "windows-link";
            packageId = "windows-link 0.2.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "Wdk" = [ "Win32_Foundation" ];
          "Wdk_Devices" = [ "Wdk" ];
          "Wdk_Devices_Bluetooth" = [ "Wdk_Devices" ];
          "Wdk_Devices_HumanInterfaceDevice" = [ "Wdk_Devices" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_NetworkManagement" = [ "Wdk" ];
          "Wdk_NetworkManagement_Ndis" = [ "Wdk_NetworkManagement" ];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = [ "Wdk_NetworkManagement" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_Memory" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32" = [ "Win32_Foundation" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_Beep" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Cdrom" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Dvd" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_Nfc" = [ "Win32_Devices" ];
          "Win32_Devices_Nfp" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_TraceLogging" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "default" ];
      };
      "windows-targets" = rec {
        crateName = "windows-targets";
        version = "0.53.3";
        edition = "2021";
        sha256 = "14fwwm136dhs3i1impqrrip7nvkra3bdxa4nqkblj604qhqn1znm";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-link";
            packageId = "windows-link 0.1.3";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows_raw_dylib" or false);
          }
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnullvm";
            packageId = "windows_i686_gnullvm";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnullvm");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc";
            target = { target, features }: ((("x86_64" == target."arch" or null) || ("arm64ec" == target."arch" or null)) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows_aarch64_gnullvm" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.53.0";
        edition = "2021";
        sha256 = "0r77pbpbcf8bq4yfwpz2hpq3vns8m0yacpvs2i5cn6fx1pwxbf46";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.53.0";
        edition = "2021";
        sha256 = "0v766yqw51pzxxwp203yqy39ijgjamp54hhdbsyqq6x1c8gilrf7";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu" = rec {
        crateName = "windows_i686_gnu";
        version = "0.53.0";
        edition = "2021";
        sha256 = "1hvjc8nv95sx5vdd79fivn8bpm7i517dqyf4yvsqgwrmkmjngp61";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnullvm" = rec {
        crateName = "windows_i686_gnullvm";
        version = "0.53.0";
        edition = "2021";
        sha256 = "04df1in2k91qyf1wzizvh560bvyzq20yf68k8xa66vdzxnywrrlw";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc" = rec {
        crateName = "windows_i686_msvc";
        version = "0.53.0";
        edition = "2021";
        sha256 = "0pcvb25fkvqnp91z25qr5x61wyya12lx8p7nsa137cbb82ayw7sq";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.53.0";
        edition = "2021";
        sha256 = "1flh84xkssn1n6m1riddipydcksp2pdl45vdf70jygx3ksnbam9f";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.53.0";
        edition = "2021";
        sha256 = "0mvc8119xpbi3q2m6mrjcdzl6afx4wffacp13v76g4jrs1fh6vha";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.53.0";
        edition = "2021";
        sha256 = "11h4i28hq0zlnjcaqi2xdxr7ibnpa8djfggch9rki1zzb8qi8517";
        authors = [
          "Microsoft"
        ];

      };
      "winnow" = rec {
        crateName = "winnow";
        version = "0.7.13";
        edition = "2021";
        sha256 = "1krrjc1wj2vx0r57m9nwnlc1zrhga3fq41d8w9hysvvqb5mj7811";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [ "std" "dep:anstream" "dep:anstyle" "dep:is_terminal_polyfill" "dep:terminal_size" ];
          "default" = [ "std" ];
          "simd" = [ "dep:memchr" ];
          "std" = [ "alloc" "memchr?/std" ];
          "unstable-doc" = [ "alloc" "std" "simd" "unstable-recover" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "wit-bindgen" = rec {
        crateName = "wit-bindgen";
        version = "0.45.1";
        edition = "2021";
        sha256 = "0dndrimz95nwdv6m24ylj0vj1dvlc012xxrxs13mc1r5y5qk8msw";
        libName = "wit_bindgen";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "async" = [ "macros" "dep:futures" "dep:once_cell" "wit-bindgen-rust-macro/async" ];
          "bitflags" = [ "dep:bitflags" ];
          "default" = [ "macros" "realloc" "async" "std" "bitflags" ];
          "macros" = [ "dep:wit-bindgen-rust-macro" ];
          "rustc-dep-of-std" = [ "dep:core" "dep:alloc" ];
        };
      };
      "zbus" = rec {
        crateName = "zbus";
        version = "5.11.0";
        edition = "2021";
        sha256 = "1xxdxb95h4cyn8w03yrgrxrpy2pr9x7blqyfn9sy7f2z0dny81rd";
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "async-broadcast";
            packageId = "async-broadcast";
          }
          {
            name = "async-executor";
            packageId = "async-executor";
            optional = true;
          }
          {
            name = "async-io";
            packageId = "async-io";
            optional = true;
          }
          {
            name = "async-lock";
            packageId = "async-lock";
            optional = true;
          }
          {
            name = "async-process";
            packageId = "async-process";
            optional = true;
          }
          {
            name = "async-recursion";
            packageId = "async-recursion";
            target = { target, features }: (("macos" == target."os" or null) || (target."windows" or false));
          }
          {
            name = "async-task";
            packageId = "async-task";
            optional = true;
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "blocking";
            packageId = "blocking";
            optional = true;
          }
          {
            name = "enumflags2";
            packageId = "enumflags2";
            features = [ "serde" ];
          }
          {
            name = "event-listener";
            packageId = "event-listener";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "nix";
            packageId = "nix";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
            features = [ "socket" "uio" "user" ];
          }
          {
            name = "ordered-stream";
            packageId = "ordered-stream";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_repr";
            packageId = "serde_repr";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "uds_windows";
            packageId = "uds_windows";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.60.2";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Security_Authorization" "Win32_System_Memory" "Win32_Networking" "Win32_Networking_WinSock" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_System_IO" "Win32_System_Threading" ];
          }
          {
            name = "winnow";
            packageId = "winnow";
          }
          {
            name = "zbus_macros";
            packageId = "zbus_macros";
          }
          {
            name = "zbus_names";
            packageId = "zbus_names";
          }
          {
            name = "zvariant";
            packageId = "zvariant";
            features = [ "enumflags2" ];
          }
        ];
        features = {
          "async-executor" = [ "dep:async-executor" ];
          "async-io" = [ "dep:async-io" "async-executor" "async-fs" "async-task" "async-lock" "async-process" "blocking" ];
          "async-lock" = [ "dep:async-lock" ];
          "async-process" = [ "dep:async-process" ];
          "async-task" = [ "dep:async-task" ];
          "blocking" = [ "dep:blocking" ];
          "blocking-api" = [ "zbus_macros/blocking-api" ];
          "bus-impl" = [ "p2p" ];
          "camino" = [ "zvariant/camino" ];
          "chrono" = [ "zvariant/chrono" ];
          "default" = [ "async-io" "blocking-api" ];
          "heapless" = [ "zvariant/heapless" ];
          "option-as-array" = [ "zvariant/option-as-array" ];
          "p2p" = [ "dep:rand" ];
          "serde_bytes" = [ "zvariant/serde_bytes" ];
          "time" = [ "zvariant/time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-vsock" = [ "dep:tokio-vsock" "tokio" ];
          "url" = [ "zvariant/url" ];
          "uuid" = [ "zvariant/uuid" ];
          "vsock" = [ "dep:vsock" "dep:async-io" ];
        };
        resolvedDefaultFeatures = [ "async-executor" "async-fs" "async-io" "async-lock" "async-process" "async-task" "blocking" ];
      };
      "zbus_macros" = rec {
        crateName = "zbus_macros";
        version = "5.11.0";
        edition = "2021";
        sha256 = "1jpsvssaxh6fxpbb64dmfnrr8r05rsyfhm32bg63rva7r2lrgrsp";
        procMacro = true;
        authors = [
          "Marc-André Lureau <marcandre.lureau@redhat.com>"
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "extra-traits" "full" "extra-traits" "fold" "full" ];
          }
          {
            name = "zbus_names";
            packageId = "zbus_names";
          }
          {
            name = "zvariant";
            packageId = "zvariant";
          }
          {
            name = "zvariant_utils";
            packageId = "zvariant_utils";
          }
        ];
        features = {
          "gvariant" = [ "zvariant/gvariant" "zvariant_utils/gvariant" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "zbus_names" = rec {
        crateName = "zbus_names";
        version = "4.2.0";
        edition = "2021";
        sha256 = "15ybdd6zic7simi9wjg0ywrxfq4sxg3z0wiyysadps3cpxj8xrkv";
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "winnow";
            packageId = "winnow";
          }
          {
            name = "zvariant";
            packageId = "zvariant";
            usesDefaultFeatures = false;
            features = [ "enumflags2" ];
          }
        ];

      };
      "zvariant" = rec {
        crateName = "zvariant";
        version = "5.7.0";
        edition = "2021";
        sha256 = "1nwqji0y214dnchq372rsfqzl86d9wgai909s761yay5ffzd77cr";
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "endi";
            packageId = "endi";
          }
          {
            name = "enumflags2";
            packageId = "enumflags2";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "winnow";
            packageId = "winnow";
          }
          {
            name = "zvariant_derive";
            packageId = "zvariant_derive";
          }
          {
            name = "zvariant_utils";
            packageId = "zvariant_utils";
          }
        ];
        features = {
          "arrayvec" = [ "dep:arrayvec" ];
          "camino" = [ "dep:camino" ];
          "chrono" = [ "dep:chrono" ];
          "enumflags2" = [ "dep:enumflags2" ];
          "gvariant" = [ "zvariant_derive/gvariant" "zvariant_utils/gvariant" ];
          "heapless" = [ "dep:heapless" ];
          "ostree-tests" = [ "gvariant" ];
          "serde_bytes" = [ "dep:serde_bytes" ];
          "time" = [ "dep:time" ];
          "url" = [ "dep:url" ];
          "uuid" = [ "dep:uuid" ];
        };
        resolvedDefaultFeatures = [ "default" "enumflags2" ];
      };
      "zvariant_derive" = rec {
        crateName = "zvariant_derive";
        version = "5.7.0";
        edition = "2021";
        sha256 = "13mnhlw8imn6garkqrq4gyxyj7rjnp0hfgqdv5mj4vd44q5zshv6";
        procMacro = true;
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "extra-traits" "full" ];
          }
          {
            name = "zvariant_utils";
            packageId = "zvariant_utils";
          }
        ];
        features = {
          "gvariant" = [ "zvariant_utils/gvariant" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "zvariant_utils" = rec {
        crateName = "zvariant_utils";
        version = "3.2.1";
        edition = "2021";
        sha256 = "16g5id3h9q85c5vcwdfwkwmwzyladbr2q8x2xinr3xl95wa9v566";
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
          "turbocooler <turbocooler@cocaine.ninja>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "extra-traits" "full" ];
          }
          {
            name = "winnow";
            packageId = "winnow";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
    This corresponds roughly to what buildRustCrate is setting.
  */
  makeDefaultTarget = platform: {
    unix = platform.isUnix;
    windows = platform.isWindows;
    fuchsia = true;
    test = false;

    inherit (platform.rust.platform)
      arch
      os
      vendor;
    family = platform.rust.platform.target-family;
    env = "gnu";
    endian =
      if platform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString platform.parsed.cpu.bits;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
    of crate given as the second argument.

    testCrateFlags: list of flags to pass to the test exectuable
    testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs, testPreRun, testPostRun }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    assert builtins.typeOf testPreRun == "string";
    assert builtins.typeOf testPostRun == "string";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test =
        let
          drv = testCrate.override
            (
              _: {
                buildTests = true;
              }
            );
          # If the user hasn't set any pre/post commands, we don't want to
          # insert empty lines. This means that any existing users of crate2nix
          # don't get a spurious rebuild unless they set these explicitly.
          testCommand = pkgs.lib.concatStringsSep "\n"
            (pkgs.lib.filter (s: s != "") [
              testPreRun
              "$f $testCrateFlags 2>&1 | tee -a $out"
              testPostRun
            ]);
        in
        pkgs.runCommand "run-tests-${testCrate.name}"
          {
            inherit testCrateFlags;
            buildInputs = testInputs;
          } ''
          set -e

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          # It's necessary to locate the source in $NIX_BUILD_TOP/source/
          # instead of $NIX_BUILD_TOP/
          # because we compiled those test binaries in the former and not the latter.
          # So all paths will expect source tree to be there and not in the build top directly.
          # For example: $NIX_BUILD_TOP := /build in general, if you ask yourself.
          # NOTE: There could be edge cases if `crate.sourceRoot` does exist but
          # it's very hard to reason about them.
          # Open a bug if you run into this!
          mkdir -p source/
          cd source/

          ${pkgs.buildPackages.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            ${testCommand}
          done
        '';
    in
    pkgs.runCommand "${crate.name}-linked"
      {
        inherit (crate) outputs crateName;
        passthru = (crate.passthru or { }) // {
          inherit test;
        };
      }
      (lib.optionalString (stdenv.buildPlatform.canExecute stdenv.hostPlatform) ''
        echo tested by ${test}
      '' + ''
        ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
      '');

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateForPkgsFunc ? null
    , runTests ? false
    , testCrateFlags ? [ ]
    , testInputs ? [ ]
      # Any command to run immediatelly before a test is executed.
    , testPreRun ? ""
      # Any command run immediatelly after a test is executed.
    , testPostRun ? ""
    }:
    lib.makeOverridable
      (
        { features
        , crateOverrides
        , runTests
        , testCrateFlags
        , testInputs
        , testPreRun
        , testPostRun
        }:
        let
          buildRustCrateForPkgsFuncOverriden =
            if buildRustCrateForPkgsFunc != null
            then buildRustCrateForPkgsFunc
            else
              (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrateForPkgs
                else
                  pkgs: (buildRustCrateForPkgs pkgs).override {
                    defaultCrateOverrides = crateOverrides;
                  }
              );
          builtRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = false;
          };
          builtTestRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = true;
          };
          drv = builtRustCrates.crates.${packageId};
          testDrv = builtTestRustCrates.crates.${packageId};
          derivation =
            if runTests then
              crateWithTest
                {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs testPreRun testPostRun;
                }
            else drv;
        in
        derivation
      )
      { inherit features crateOverrides runTests testCrateFlags testInputs testPreRun testPostRun; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
    for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateForPkgsFunc
    , runTests
    , makeTarget ? makeDefaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs (makeTarget stdenv.hostPlatform));
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures
          (
            args // {
              inherit rootPackageId;
              target = makeTarget stdenv.hostPlatform // { test = runTests; };
            }
          );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs = pkgs:
          let
            self = {
              crates = lib.mapAttrs (packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId) crateConfigs;
              target = makeTarget stdenv.hostPlatform;
              build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
            };
          in
          self;
        buildByPackageIdForPkgsImpl = self: pkgs: packageId:
          let
            features = mergedFeatures."${packageId}" or [ ];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or [ ]);
            dependencies =
              dependencyDerivations {
                inherit features;
                inherit (self) target;
                buildByPackageId = depPackageId:
                  # proc_macro crates must be compiled for the build architecture
                  if crateConfigs.${depPackageId}.procMacro or false
                  then self.build.crates.${depPackageId}
                  else self.crates.${depPackageId};
                dependencies =
                  (crateConfig.dependencies or [ ])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit features;
                inherit (self.build) target;
                buildByPackageId = depPackageId:
                  self.build.crates.${depPackageId};
                dependencies = crateConfig.buildDependencies or [ ];
              };
            dependenciesWithRenames =
              let
                buildDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self) target;
                  dependencies = crateConfig.dependencies or [ ] ++ devDependencies;
                };
                hostDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self.build) target;
                  dependencies = crateConfig.buildDependencies or [ ];
                };
              in
              lib.filter (d: d ? "rename") (hostDeps ++ buildDeps);
            # Crate renames have the form:
            #
            # {
            #    crate_name = [
            #       { version = "1.2.3"; rename = "crate_name01"; }
            #    ];
            #    # ...
            # }
            crateRenames =
              let
                grouped =
                  lib.groupBy
                    (dependency: dependency.name)
                    dependenciesWithRenames;
                versionAndRename = dep:
                  let
                    package = crateConfigs."${dep.packageId}";
                  in
                  { inherit (dep) rename; inherit (package) version; };
              in
              lib.mapAttrs (name: builtins.map versionAndRename) grouped;
          in
          buildRustCrateForPkgsFunc pkgs
            (
              crateConfig // {
                src = crateConfig.src or (
                  pkgs.fetchurl rec {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 =
                      assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                      crateConfig.sha256;
                  }
                );
                extraRustcOpts = lib.lists.optional (targetFeatures != [ ]) "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
      builtByPackageIdByPkgs;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { buildByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
      map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
    be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: sanitizeForJson) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? makeDefaultTarget stdenv.hostPlatform }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateForPkgsFunc = _: lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson
          (
            buildRustCrateWithFeatures {
              buildRustCrateForPkgsFunc = _: crate: {
                "01_crateName" = crate.crateName or false;
                "02_features" = crate.features or [ ];
                "03_dependencies" = crate.dependencies or [ ];
              };
              inherit packageId;
            }
          );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
    { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
    features.

    This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) { } [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or [ ]) != (v."cargo".resolved_default_features or [ ])
          )
          combined;
      in
      builtins.toJSON {
        inherit onlyInCargo onlyInCrate2Nix differentFeatures;
      };

  /* Returns an attrset mapping packageId to the list of enabled features.

    If multiple paths to a dependency enable different features, the
    corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? { }
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or { }) features;
        enabledFeatures = enableFeatures (crateConfig.dependencies or [ ]) expandedFeatures;
        depWithResolvedFeatures = dependency:
          let
            inherit (dependency) packageId;
            features = dependencyFeatures enabledFeatures dependency;
          in
          { inherit packageId features; };
        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = enabledFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
          foldOverCache
            (
              cache: { packageId, features }:
                let
                  cacheFeatures = cache.${packageId} or [ ];
                  combinedFeatures = sortedUnique (cacheFeatures ++ features);
                in
                if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                then cache
                else
                  mergePackageFeatures {
                    features = combinedFeatures;
                    featuresByPackageId = cache;
                    inherit crateConfigs packageId target runTests rootPackageId;
                  }
            );
        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [ ];
            combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
          in
          featuresByPackageId // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep"
            (
              crateConfig.dependencies or [ ]
              ++ lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig.devDependencies or [ ])
            );
        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or [ ]);
      in
      cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
        let
          targetFunc = dep.target or (features: true);
        in
        targetFunc { inherit features target; }
        && (
          !(dep.optional or false)
          || builtins.any (doesFeatureEnableDependency dep) features
        )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = dependency: feature:
    let
      name = dependency.rename or dependency.name;
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
    feature == name || feature == "dep:" + name || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
    rules in featureMap.

    featureMap is an attribute set which maps feature names to lists of further
    feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeaturesNoCycle = oldSeen: inputFeatures:
        if inputFeatures != [ ]
        then
          let
            # The feature we're currently expanding.
            feature = builtins.head inputFeatures;
            # All the features we've seen/expanded so far, including the one
            # we're currently processing.
            seen = oldSeen // { ${feature} = 1; };
            # Expand the feature but be careful to not re-introduce a feature
            # that we've already seen: this can easily cause a cycle, see issue
            # #209.
            enables = builtins.filter (f: !(seen ? "${f}")) (featureMap."${feature}" or [ ]);
          in
          [ feature ] ++ (expandFeaturesNoCycle seen (builtins.tail inputFeatures ++ enables))
        # No more features left, nothing to expand to.
        else [ ];
      outFeatures = expandFeaturesNoCycle { } inputFeatures;
    in
    sortedUnique outFeatures;

  /* This function adds optional dependencies as features if they are enabled
    indirectly by dependency features. This function mimics Cargo's behavior
    described in a note at:
    https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
  */
  enableFeatures = dependencies: features:
    assert (builtins.isList features);
    assert (builtins.isList dependencies);
    let
      additionalFeatures = lib.concatMap
        (
          dependency:
            assert (builtins.isAttrs dependency);
            let
              enabled = builtins.any (doesFeatureEnableDependency dependency) features;
            in
            if (dependency.optional or false) && enabled
            then [ (dependency.rename or dependency.name) ]
            else [ ]
        )
        dependencies;
    in
    sortedUnique (features ++ additionalFeatures);

  /*
    Returns the actual features for the given dependency.

    features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil =
        if dependency.usesDefaultFeatures or true
        then [ "default" ]
        else [ ];
      explicitFeatures = dependency.features or [ ];
      additionalDependencyFeatures =
        let
          name = dependency.rename or dependency.name;
          stripPrefixMatch = prefix: s:
            if lib.hasPrefix prefix s
            then lib.removePrefix prefix s
            else null;
          extractFeature = feature: lib.findFirst
            (f: f != null)
            null
            (map (prefix: stripPrefixMatch prefix feature) [
              (name + "/")
              (name + "?/")
            ]);
          dependencyFeatures = lib.filter (f: f != null) (map extractFeature features);
        in
        dependencyFeatures;
    in
    defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
    builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #
  };
}

